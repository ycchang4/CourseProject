WEBVTT Kind: captions; Language: en-US

NOTE
Created on 2021-02-27T00:05:03.4649298Z by ClassTranscribe

00:00:00.280 --> 00:00:02.140
This lecture is about the collaborative

00:00:02.140 --> 00:00:02.660
filtering.

00:00:11.430 --> 00:00:13.000
In this lecture, we're going to

00:00:13.000 --> 00:00:14.870
continue the discussion of recommender

00:00:14.870 --> 00:00:15.520
systems.

00:00:16.130 --> 00:00:17.970
In particular, we're going to look at

00:00:17.970 --> 00:00:20.050
the approach of collaborative

00:00:20.050 --> 00:00:20.510
filtering.

00:00:21.290 --> 00:00:23.720
You have seen this slide before when we

00:00:23.720 --> 00:00:25.640
talked about the two strategies to

00:00:25.640 --> 00:00:28.300
answer the basic question will user U

00:00:28.300 --> 00:00:29.600
like item X.

00:00:30.200 --> 00:00:31.810
In the previous lecture, we looked at

00:00:31.810 --> 00:00:33.250
the item similarity.

00:00:33.800 --> 00:00:36.240
That's content-based filtering.

00:00:36.240 --> 00:00:37.970
In this lecture, we will look at the user

00:00:37.970 --> 00:00:38.810
similarity.

00:00:39.440 --> 00:00:41.660
This is a different strategy called a

00:00:41.660 --> 00:00:42.690
collaborative filtering.

00:00:43.970 --> 00:00:45.410
So first, what is collaborative

00:00:45.410 --> 00:00:45.850
filtering?

00:00:47.350 --> 00:00:49.710
It is to make filtering decisions for

00:00:49.710 --> 00:00:51.830
individual user based on the judgments

00:00:51.830 --> 00:00:52.910
of other users.

00:00:54.140 --> 00:00:56.140
And that is, we say, we will infer

00:00:56.140 --> 00:00:59.170
individual's interest or preferences

00:00:59.170 --> 00:01:01.420
from that of other similar users.

00:01:01.990 --> 00:01:04.160
So the general idea is the following.

00:01:04.160 --> 00:01:07.550
Given a user U, we're going to 1st find

00:01:07.550 --> 00:01:10.160
the similar users u_1 through u_m.

00:01:11.940 --> 00:01:13.550
And then we're going to predict the user

00:01:13.550 --> 00:01:16.880
preferences based on the preferences of

00:01:16.880 --> 00:01:18.430
these similar users.

00:01:19.750 --> 00:01:21.140
u_1 through u_m.

00:01:22.290 --> 00:01:24.010
Now the user similarity

00:01:24.010 --> 00:01:25.800
here can be judged based on their

00:01:25.800 --> 00:01:28.590
similarity in preferences on a common

00:01:28.590 --> 00:01:29.710
set of items.

00:01:30.980 --> 00:01:33.360
Now here you can see the exact content

00:01:33.360 --> 00:01:35.780
of item doesn't really matter.

00:01:35.780 --> 00:01:37.720
We're going to look at the only the

00:01:37.720 --> 00:01:40.510
relation between the users and items.

00:01:41.690 --> 00:01:43.480
So this means this approach is very

00:01:43.480 --> 00:01:44.050
general.

00:01:44.050 --> 00:01:47.000
It can be applied to any items.

00:01:47.570 --> 00:01:49.850
Not just the text options, so this

00:01:49.850 --> 00:01:51.840
approach it would work well under the

00:01:51.840 --> 00:01:52.890
following assumptions.

00:01:53.570 --> 00:01:54.120
1st.

00:01:54.700 --> 00:01:57.900
Users with the same interest where have

00:01:57.900 --> 00:01:59.140
similar preferences.

00:01:59.140 --> 00:02:01.062
Second, the users with similar

00:02:01.062 --> 00:02:03.117
preferences probably share the same

00:02:03.117 --> 00:02:03.480
interest.

00:02:03.480 --> 00:02:04.430
So for example.

00:02:05.030 --> 00:02:07.300
If the interest of the user is in

00:02:07.300 --> 00:02:09.060
information retrieval, then we can

00:02:09.060 --> 00:02:12.400
infer the user probably favor SIGIR

00:02:12.400 --> 00:02:13.070
papers.

00:02:14.030 --> 00:02:15.750
Alright, so those who are interested in

00:02:15.750 --> 00:02:17.870
information retrieval research probably

00:02:17.870 --> 00:02:19.780
all favor SIGIR papers.

00:02:19.780 --> 00:02:22.160
That's the assumption that we make and if

00:02:22.160 --> 00:02:23.450
this assumption is true,

00:02:23.450 --> 00:02:25.380
Then it would help collaborative

00:02:25.380 --> 00:02:27.340
filtering to work well.

00:02:27.340 --> 00:02:30.720
We can also assume that if we see

00:02:30.720 --> 00:02:33.210
people favor SIGIR papers,

00:02:33.910 --> 00:02:36.490
then we can infer their interest is

00:02:36.490 --> 00:02:38.110
probably information retrieval.

00:02:38.110 --> 00:02:41.460
So in this simple examples it seems to

00:02:41.460 --> 00:02:42.170
make sense.

00:02:42.890 --> 00:02:46.130
And in many cases, such assumption

00:02:46.130 --> 00:02:47.850
actually does make sense.

00:02:48.400 --> 00:02:50.030
So another assumption we have to make

00:02:50.030 --> 00:02:52.110
is that there are sufficiently large

00:02:52.110 --> 00:02:55.300
number of user preferences available to

00:02:55.300 --> 00:02:55.860
us.

00:02:55.860 --> 00:02:57.660
So for example, if you see a lot of

00:02:57.660 --> 00:03:01.170
ratings of users for movies, and those

00:03:01.170 --> 00:03:02.858
indicate their preferences for movies,

00:03:02.858 --> 00:03:05.580
and if you have a lot of such data,

00:03:05.580 --> 00:03:08.010
then collaborative filtering can be

00:03:08.010 --> 00:03:08.930
very effective.

00:03:09.740 --> 00:03:12.310
If not, there will be a problem, and

00:03:12.310 --> 00:03:14.130
that's often called cold start

00:03:14.130 --> 00:03:14.660
problem.

00:03:14.660 --> 00:03:16.790
That means you don't have many

00:03:16.790 --> 00:03:19.300
preferences available, so the system

00:03:19.300 --> 00:03:21.470
could not afford to take advantage of

00:03:21.470 --> 00:03:22.850
collaborative filtering yet.

00:03:23.960 --> 00:03:26.650
So let's look at the collaborative

00:03:26.650 --> 00:03:29.070
filtering problem in a more formal way,

00:03:29.070 --> 00:03:33.150
and so this picture shows that we are

00:03:33.150 --> 00:03:36.363
in general considering a lot of users

00:03:36.363 --> 00:03:39.920
showing we're showing M users here.

00:03:39.920 --> 00:03:44.190
So u_1 through u_m and we also

00:03:44.190 --> 00:03:46.229
considering a number of objects, let's

00:03:46.230 --> 00:03:49.756
say N objects denoted as o_1 through

00:03:49.756 --> 00:03:52.245
o_n and then we will assume that the

00:03:52.245 --> 00:03:54.800
users will be able to judge those

00:03:55.090 --> 00:03:58.549
objects and the user could for example

00:03:58.550 --> 00:04:01.181
give ratings for those items, for

00:04:01.181 --> 00:04:03.830
example, those items could be movies.

00:04:04.400 --> 00:04:07.120
Could be products and then the users

00:04:07.120 --> 00:04:09.690
would give ratings 1 through 5 let's

00:04:09.690 --> 00:04:10.275
say.

00:04:10.275 --> 00:04:12.340
So what you see here is that we have

00:04:12.340 --> 00:04:15.480
shown some ratings available for some

00:04:15.480 --> 00:04:18.280
combinations, so some users have

00:04:18.280 --> 00:04:20.600
watched some movies they have rated

00:04:20.600 --> 00:04:21.840
those movies.

00:04:21.840 --> 00:04:24.650
They obviously won't be able to watch

00:04:24.650 --> 00:04:26.510
all the movies and some users may

00:04:26.510 --> 00:04:30.070
actually only watch a few movies.

00:04:30.070 --> 00:04:33.613
So this is in general a sparse matrix.

00:04:33.613 --> 00:04:36.580
So many items, many entries.

00:04:36.750 --> 00:04:38.060
Have unknown values.

00:04:39.060 --> 00:04:41.070
And what's interesting here is

00:04:42.410 --> 00:04:46.650
we could potentially infer the value of

00:04:46.650 --> 00:04:50.480
an element in this matrix based on other

00:04:50.480 --> 00:04:53.100
values, and that's actually the central

00:04:53.100 --> 00:04:55.076
question in collaborative filtering,

00:04:55.076 --> 00:04:57.860
and that is we assume there's unknown

00:04:57.860 --> 00:05:01.320
function here F that would map a pair

00:05:01.320 --> 00:05:03.520
of a user and an object to the rating.

00:05:04.280 --> 00:05:06.990
And we have observed some values of

00:05:06.990 --> 00:05:07.800
this function.

00:05:08.850 --> 00:05:11.190
And we want to infer the value of this

00:05:11.190 --> 00:05:13.640
function for other pairs,

00:05:14.250 --> 00:05:16.980
That with that don't have values

00:05:16.980 --> 00:05:18.250
available here.

00:05:19.270 --> 00:05:23.710
So this is very similar to other

00:05:23.710 --> 00:05:26.330
machine learning problems where we know

00:05:26.330 --> 00:05:30.810
the values of the function on some

00:05:30.810 --> 00:05:32.630
training data sets and we hope to

00:05:32.630 --> 00:05:35.814
predict the values of this function on

00:05:35.814 --> 00:05:37.540
some test data, right?

00:05:37.540 --> 00:05:39.930
So this is a function approximation.

00:05:40.550 --> 00:05:43.590
And how can we figure out the function

00:05:43.590 --> 00:05:47.310
based on the observed ratings?

00:05:47.310 --> 00:05:49.630
So this is the setup.

00:05:49.630 --> 00:05:52.390
Now there are many approaches to

00:05:52.390 --> 00:05:55.215
solving this problem, and in fact this

00:05:55.215 --> 00:05:57.450
is a very active research area, a reason

00:05:57.450 --> 00:05:57.940
there are special conferences

00:05:57.940 --> 00:06:00.070
there are special conferences

00:06:00.070 --> 00:06:02.540
dedicated to the problem.

00:06:02.540 --> 00:06:05.743
R is the major conference devotes to the problem.

00:06:05.743 --> 00:06:06.269
the problem.


