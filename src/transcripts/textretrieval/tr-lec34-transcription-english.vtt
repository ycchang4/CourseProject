WEBVTT Kind: captions; Language: en-US

NOTE
Created on 2021-02-27T00:07:08.9065119Z by ClassTranscribe

00:00:00.280 --> 00:00:03.370
This lecture is about learning to rank.

00:00:03.370 --> 00:00:06.010
In this lecture we are going to continue

00:00:06.010 --> 00:00:07.565
talking about web search.

00:00:07.565 --> 00:00:09.190
In particular, we're going to talk

00:00:09.190 --> 00:00:10.880
about the using machine learning to

00:00:10.880 --> 00:00:13.250
combine different features to improve

00:00:13.250 --> 00:00:14.390
the ranking function.

00:00:22.260 --> 00:00:25.370
So the question that we address in this

00:00:25.370 --> 00:00:28.900
lecture is how we can combine many

00:00:28.900 --> 00:00:32.880
features to generate a single ranking

00:00:32.880 --> 00:00:36.020
function to optimize search results.

00:00:36.020 --> 00:00:38.276
In the previous lectures we have talked

00:00:38.276 --> 00:00:41.230
about a number of ways to rank

00:00:41.230 --> 00:00:41.630
documents.

00:00:41.630 --> 00:00:44.160
We have talked about some retrieval

00:00:44.160 --> 00:00:47.430
models, like BM25 or query like code.

00:00:47.430 --> 00:00:49.400
They can generate the content based

00:00:49.400 --> 00:00:52.680
scores for matching documents

00:00:52.920 --> 00:00:55.810
with a query and we also talked about

00:00:55.810 --> 00:00:57.690
the link based approaches like page

00:00:57.690 --> 00:01:01.360
rank that can give additional scores

00:01:01.360 --> 00:01:03.060
to help us improve ranking.

00:01:03.840 --> 00:01:05.480
Now the question now is how can we

00:01:05.480 --> 00:01:07.180
combine all these features

00:01:07.180 --> 00:01:09.745
and potential many other features to do

00:01:09.745 --> 00:01:11.300
ranking and this will be very useful

00:01:11.300 --> 00:01:13.210
for ranking web pages.

00:01:14.260 --> 00:01:16.400
Not only just to improve accuracy, but

00:01:16.400 --> 00:01:19.190
also to improve the robustness of the

00:01:19.190 --> 00:01:21.030
ranking function so that it's not easy

00:01:21.030 --> 00:01:24.540
for a spammer to just perturb a one or

00:01:24.540 --> 00:01:26.810
a few features to promote the page.

00:01:27.830 --> 00:01:31.110
So the general idea of learning to rank

00:01:31.110 --> 00:01:32.920
is to use machine learning to combine

00:01:32.920 --> 00:01:35.710
these features to optimize the weights,

00:01:35.710 --> 00:01:37.960
different features to generate the

00:01:37.960 --> 00:01:39.290
optimal ranking function.

00:01:40.520 --> 00:01:42.350
So we will assume that the given a

00:01:42.350 --> 00:01:45.130
query document appear Q and D.

00:01:46.010 --> 00:01:48.950
We can define a number of features.

00:01:49.550 --> 00:01:52.640
And these features can vary from

00:01:52.640 --> 00:01:56.020
content based features such as a score

00:01:56.020 --> 00:01:58.963
of the document with respect to the

00:01:58.963 --> 00:02:01.740
query according to a retrieval function

00:02:01.740 --> 00:02:05.310
such as BM25, or query likelihood or

00:02:05.310 --> 00:02:09.770
pivot length normalization PL2 etc.

00:02:10.370 --> 00:02:13.100
It can also be linked based score

00:02:13.100 --> 00:02:14.390
like page rank score.

00:02:15.090 --> 00:02:19.340
It can be also application of retrieval

00:02:19.340 --> 00:02:23.380
models to the anchor text of the page,

00:02:23.380 --> 00:02:25.870
those are the text descriptions of

00:02:25.870 --> 00:02:29.440
links that point to this page.

00:02:29.440 --> 00:02:32.020
So these can all be clues about

00:02:32.020 --> 00:02:33.710
whether this document is relevant or

00:02:33.710 --> 00:02:34.250
not.

00:02:34.950 --> 00:02:38.320
We can even include a feature such as

00:02:38.320 --> 00:02:43.250
whether the URL has a tilde '~', because

00:02:43.250 --> 00:02:46.140
this might be indicator of homepage or

00:02:46.140 --> 00:02:46.910
engine page.

00:02:48.090 --> 00:02:49.610
So all these features can then be

00:02:49.610 --> 00:02:51.420
combined together to generate the

00:02:51.420 --> 00:02:52.035
ranking function.

00:02:52.035 --> 00:02:54.000
The question is of course, how can we

00:02:54.000 --> 00:02:56.080
combine them? In this approach

00:02:56.080 --> 00:03:00.755
we simply hypothesize that the probability that

00:03:00.755 --> 00:03:02.770
this document is relevant to this

00:03:02.770 --> 00:03:03.410
query is

00:03:04.160 --> 00:03:06.800
function of all these features.

00:03:07.670 --> 00:03:10.410
So we can hypothesize

00:03:11.390 --> 00:03:14.620
that the probability of relevance is

00:03:14.620 --> 00:03:17.550
related to these features through a

00:03:17.550 --> 00:03:20.150
particular form of the function that

00:03:20.150 --> 00:03:22.030
has some parameters.

00:03:22.030 --> 00:03:25.560
These parameters can control the

00:03:25.560 --> 00:03:28.650
influence of different features on the

00:03:28.650 --> 00:03:29.940
final relevance.

00:03:31.120 --> 00:03:33.480
This is of course just a assumption

00:03:33.480 --> 00:03:35.350
whether this assumption really makes

00:03:35.350 --> 00:03:39.240
sense is the big question and they

00:03:39.240 --> 00:03:42.800
have to empirically evaluate the

00:03:42.800 --> 00:03:43.540
function.

00:03:44.900 --> 00:03:49.620
But by hypothesising that relevance is

00:03:49.620 --> 00:03:51.260
related to these features in a

00:03:51.260 --> 00:03:53.757
particular way, we can then combine

00:03:53.757 --> 00:03:56.450
these features to generate the

00:03:56.450 --> 00:03:58.065
potentially more powerful ranking

00:03:58.065 --> 00:03:59.645
function and more robust ranking

00:03:59.645 --> 00:04:00.060
function.

00:04:00.690 --> 00:04:03.056
Naturally, the next question is how do

00:04:03.056 --> 00:04:05.796
we estimate those parameters and how do

00:04:05.796 --> 00:04:07.900
we know which features should have a

00:04:07.900 --> 00:04:09.525
higher weight than which features

00:04:09.525 --> 00:04:13.000
should have lower weight, so this is the task

00:04:13.000 --> 00:04:15.080
of training or learning, right?

00:04:15.080 --> 00:04:17.890
So in this approach, what we will do is

00:04:17.890 --> 00:04:19.780
to use some training data.

00:04:19.780 --> 00:04:23.600
Those are the data that have been

00:04:23.600 --> 00:04:26.057
judged by users so that we already know

00:04:26.057 --> 00:04:27.932
the relevance judgments we already know

00:04:27.932 --> 00:04:29.850
which documents should be ranked high

00:04:29.850 --> 00:04:31.260
for which queries.

00:04:31.320 --> 00:04:33.880
And this information can be based on

00:04:33.880 --> 00:04:38.339
real judgments by users, or this can

00:04:38.340 --> 00:04:40.295
also be approximated by just using

00:04:40.295 --> 00:04:43.200
click through information where we can

00:04:43.200 --> 00:04:44.840
assume the clicked

00:04:44.840 --> 00:04:47.720
documents are better than the skiped

00:04:47.720 --> 00:04:49.982
documents or clicked documents

00:04:49.982 --> 00:04:52.060
are relevant and skiped documents are

00:04:52.060 --> 00:04:52.780
non relevant.

00:04:53.400 --> 00:04:56.430
So in general, we would fit such a

00:04:56.430 --> 00:04:59.140
hypothesize the ranking function

00:04:59.140 --> 00:05:01.500
to the training data, meaning that

00:05:01.500 --> 00:05:03.920
we will try to optimize its retrieval

00:05:03.920 --> 00:05:07.140
accuracy on the training data, we can

00:05:07.140 --> 00:05:10.780
adjust these parameters to see how we can

00:05:10.780 --> 00:05:13.862
optimize the performance of the

00:05:13.862 --> 00:05:16.530
function on the training data in terms

00:05:16.530 --> 00:05:19.450
of some measures such as MAP or nDCG.

00:05:19.450 --> 00:05:23.160
So the training data would look like a

00:05:23.160 --> 00:05:24.430
table of

00:05:24.510 --> 00:05:29.490
tuples. Each tuple has three elements.

00:05:29.490 --> 00:05:32.030
The query, the document and judgment.

00:05:32.720 --> 00:05:34.500
So it looks very much like our

00:05:34.500 --> 00:05:37.860
relevance judgments that we talked

00:05:37.860 --> 00:05:40.340
about in evaluation of retrieval

00:05:40.340 --> 00:05:41.070
systems.


