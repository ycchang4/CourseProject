WEBVTT Kind: captions; Language: en-US

NOTE
Created on 2021-02-26T23:58:12.4028959Z by ClassTranscribe

00:00:00.280 --> 00:00:02.225
This lecture is about the feedback in

00:00:02.225 --> 00:00:03.610
the vector space model.

00:00:12.740 --> 00:00:15.350
In this lecture we continue talking

00:00:15.350 --> 00:00:17.940
about feedback in text retrieval.

00:00:17.940 --> 00:00:19.756
Particularly, we're going to talk about

00:00:19.756 --> 00:00:21.540
feedback in the vector space model.

00:00:23.810 --> 00:00:26.530
As we have discussed before, in the

00:00:26.530 --> 00:00:27.600
case of feedback.

00:00:28.330 --> 00:00:31.090
The task of a Text Retrieval system is

00:00:31.090 --> 00:00:33.240
to learn from examples to improve

00:00:33.240 --> 00:00:34.510
retrieval accuracy.

00:00:34.510 --> 00:00:37.490
We will have positive examples.

00:00:37.490 --> 00:00:39.130
Those are the documents that are

00:00:39.130 --> 00:00:41.353
assumed to be relevant or judgement be

00:00:41.353 --> 00:00:41.799
relevant.

00:00:42.480 --> 00:00:44.455
Or the document that are viewed by

00:00:44.455 --> 00:00:45.020
users.

00:00:45.020 --> 00:00:46.820
We also have negative examples.

00:00:46.820 --> 00:00:49.490
Those are documents known in non-relevant, and

00:00:49.490 --> 00:00:51.620
they can also be the document that

00:00:51.620 --> 00:00:53.210
escaped by users.

00:00:55.150 --> 00:00:57.180
The general method in the vector space

00:00:57.180 --> 00:00:59.270
model for feedback.

00:01:00.680 --> 00:01:04.140
Is to modify our query vector and we

00:01:04.140 --> 00:01:06.550
want to place the query vector in a

00:01:06.550 --> 00:01:08.680
better position to make the accurate.

00:01:09.460 --> 00:01:10.940
And what does that mean exactly?

00:01:10.940 --> 00:01:13.085
If we think about the query vector,

00:01:13.085 --> 00:01:14.685
that would mean we have to do something

00:01:14.685 --> 00:01:16.050
to the vector elements.

00:01:17.150 --> 00:01:18.955
And in general, that would mean we

00:01:18.955 --> 00:01:21.115
might add new terms.

00:01:21.115 --> 00:01:25.540
We might adjust weights of all terms or

00:01:25.540 --> 00:01:27.340
assign weights to new terms.

00:01:27.980 --> 00:01:30.840
And as a result, in general the query

00:01:30.840 --> 00:01:33.370
will have more terms, so we often call

00:01:33.370 --> 00:01:34.860
this query expansion.

00:01:37.790 --> 00:01:39.550
The most effective method in the vector

00:01:39.550 --> 00:01:41.330
space model for feedback is called

00:01:41.330 --> 00:01:43.130
Walker feedback, which was after he

00:01:43.130 --> 00:01:45.220
proposed at several decades ago.

00:01:47.380 --> 00:01:49.360
So the idea is quite simple.

00:01:49.360 --> 00:01:51.870
We illustrate this idea by using a 2

00:01:51.870 --> 00:01:54.420
dimensional display of all the

00:01:54.420 --> 00:01:56.700
documents in the collection and also

00:01:56.700 --> 00:01:57.640
the query vector.

00:01:58.220 --> 00:02:02.250
So now we can see the query vector is

00:02:02.250 --> 00:02:03.930
here in the center.

00:02:05.210 --> 00:02:06.960
And these are all the documents.

00:02:07.730 --> 00:02:09.940
So when we use the query vector and use a

00:02:09.940 --> 00:02:11.730
similarity function to find the most

00:02:11.730 --> 00:02:13.620
similar documents, we are basically

00:02:13.620 --> 00:02:14.970
drawing a circle here and then.

00:02:14.970 --> 00:02:16.889
These documents would be basically the

00:02:16.890 --> 00:02:18.119
top ranked of the documents.

00:02:18.840 --> 00:02:20.970
And these pluses are relevant

00:02:20.970 --> 00:02:21.580
documents.

00:02:22.390 --> 00:02:24.220
And these are relevant documents.

00:02:24.220 --> 00:02:26.810
For example is relevant, etc.

00:02:26.810 --> 00:02:30.660
And then these minuses are negative

00:02:30.660 --> 00:02:32.040
documents like this.

00:02:34.150 --> 00:02:38.040
So our goal here is trying to move this

00:02:38.040 --> 00:02:40.250
query vector to some position to

00:02:40.250 --> 00:02:41.980
improve the retrieval accuracy.

00:02:42.690 --> 00:02:45.530
By looking at this diagram.

00:02:46.810 --> 00:02:47.960
What do you think?

00:02:47.960 --> 00:02:50.390
Where should we move the query of after

00:02:50.390 --> 00:02:52.580
so that we can improve the retrieval

00:02:52.580 --> 00:02:53.200
accuracy?

00:02:53.790 --> 00:02:56.180
Intuitively, where do you want to move

00:02:56.180 --> 00:02:57.290
the query vector?

00:02:57.920 --> 00:03:00.610
Now, if you want to think more, you can

00:03:00.610 --> 00:03:01.570
pause the video.

00:03:02.860 --> 00:03:06.320
Now, if you think about this picture,

00:03:06.320 --> 00:03:09.010
you can realize that in order to work

00:03:09.010 --> 00:03:11.602
well in this case you want to query

00:03:11.602 --> 00:03:13.640
about that to be as close to the

00:03:13.640 --> 00:03:15.480
positive vectors as possible.

00:03:15.480 --> 00:03:17.800
That means ideally you want to place

00:03:17.800 --> 00:03:21.140
the query vector somewhere here, or you

00:03:21.140 --> 00:03:24.190
want to move the query vector closer to

00:03:24.190 --> 00:03:24.790
this point.

00:03:26.390 --> 00:03:28.390
Now, So what exactly is this point?

00:03:28.970 --> 00:03:33.318
Well, If you want these relevant documents to

00:03:33.318 --> 00:03:36.810
be ranked on the top, you want this to

00:03:36.810 --> 00:03:40.114
be in the center of all these relevant

00:03:40.114 --> 00:03:41.050
documents, right?

00:03:41.050 --> 00:03:43.120
Because then if you draw a circle

00:03:43.120 --> 00:03:45.745
around this one, you get all these

00:03:45.745 --> 00:03:46.450
relevant documents.

00:03:47.140 --> 00:03:50.430
So that means we can move the query

00:03:50.430 --> 00:03:52.730
vector towards the centroid of all the

00:03:52.730 --> 00:03:54.660
relevant locking vectors.

00:03:55.570 --> 00:03:57.680
And this is basically the idea of Rocchio

00:03:57.680 --> 00:03:57.930
you.

00:03:59.070 --> 00:04:00.840
Of course you can consider the centroid

00:04:00.840 --> 00:04:03.060
of negative documents, and we want to

00:04:03.060 --> 00:04:05.090
move away from the negative documents.

00:04:06.150 --> 00:04:07.870
Not geometrically, we're talking about

00:04:07.870 --> 00:04:10.530
the movie vector closer to some other

00:04:10.530 --> 00:04:12.600
bath and away from other vectors.

00:04:13.420 --> 00:04:16.750
Algebraically, it just means we have

00:04:16.750 --> 00:04:17.590
this formula.

00:04:17.590 --> 00:04:20.810
Here you can see this is original query

00:04:20.810 --> 00:04:21.450
vector.

00:04:22.130 --> 00:04:26.876
And, this average basically is the

00:04:26.876 --> 00:04:29.560
centroid vector of relevant documents.

00:04:29.560 --> 00:04:31.738
When we take the average of these

00:04:31.738 --> 00:04:33.520
vectors, then we are computing the

00:04:33.520 --> 00:04:36.204
centroid of these vectors and similarly

00:04:36.204 --> 00:04:39.829
this is the average non relevant

00:04:39.830 --> 00:04:40.990
document vectors.

00:04:40.990 --> 00:04:43.240
So it's essentially of non relevant

00:04:44.660 --> 00:04:47.110
documents and we have these three

00:04:47.110 --> 00:04:51.440
parameters here of our alpha beta and gamma

00:04:51.440 --> 00:04:53.980
they're controlling the amount of

00:04:53.980 --> 00:04:54.700
movement.

00:04:54.700 --> 00:04:57.550
When we add these two vectors together,

00:04:57.550 --> 00:04:59.660
we are moving the query 

00:04:59.660 --> 00:05:02.570
closer to the centroid.

00:05:03.420 --> 00:05:05.960
I said add them together when we

00:05:05.960 --> 00:05:07.940
subtract this part.

00:05:07.940 --> 00:05:11.330
We kind of move the query vector away

00:05:11.330 --> 00:05:12.270
from that

00:05:12.920 --> 00:05:13.530
Central.

00:05:14.460 --> 00:05:17.210
So this is the main idea of Rocchio

00:05:17.210 --> 00:05:20.900
feedback and after we have done this we

00:05:20.900 --> 00:05:23.460
will get a new query vector which can

00:05:23.460 --> 00:05:24.920
be used to store documents.

00:05:25.550 --> 00:05:30.010
This newer query vector will then

00:05:30.010 --> 00:05:34.180
reflect the move of this original query

00:05:34.180 --> 00:05:39.130
vector toward this relevant centroid

00:05:39.130 --> 00:05:42.600
vector and away from the non relevant

00:05:42.600 --> 00:05:43.450
centroid vector.

00:05:44.980 --> 00:05:47.490
OK, so let's take a look at the

00:05:47.490 --> 00:05:47.980
example.

00:05:47.980 --> 00:05:50.110
This is the example that we have seen

00:05:50.110 --> 00:05:54.370
earlier, only that I give the display

00:05:54.370 --> 00:05:55.380
of the actual documents.

00:05:55.380 --> 00:05:57.455
I only showed the vector representation

00:05:57.455 --> 00:05:58.560
of these documents.

00:05:58.560 --> 00:06:01.070
We have 5 documents here.

00:06:01.960 --> 00:06:03.690
And we have.

00:06:04.630 --> 00:06:07.940
Two relevant the documents here.

00:06:09.360 --> 00:06:10.100
Right?

00:06:10.690 --> 00:06:12.975
They are displayed in red and these are

00:06:12.975 --> 00:06:15.880
the term vectors and I have just

00:06:15.880 --> 00:06:18.530
assumed some TF IDF weights. A  lot of

00:06:18.530 --> 00:06:18.880
terms.

00:06:18.880 --> 00:06:20.536
We have zero weights of course and

00:06:20.536 --> 00:06:22.330
these are negative documents.

00:06:22.330 --> 00:06:23.745
There are two here.

00:06:23.745 --> 00:06:25.940
There was another one here.

00:06:25.940 --> 00:06:29.050
Now in this Rocchio method we first

00:06:29.050 --> 00:06:32.650
compute the centroid of each category I

00:06:32.650 --> 00:06:34.570
so let's see.

00:06:35.860 --> 00:06:37.680
Look at the centroid vectors of the

00:06:37.680 --> 00:06:38.966
positive documents.

00:06:38.966 --> 00:06:42.530
What we simply just, so it's very easy

00:06:42.530 --> 00:06:42.930
to see.

00:06:42.930 --> 00:06:46.265
We just add this with this one.

00:06:46.265 --> 00:06:49.380
The corresponding element, and that's

00:06:49.380 --> 00:06:51.710
down here and take the average and then

00:06:51.710 --> 00:06:53.480
we will know added the corresponding

00:06:53.480 --> 00:06:56.560
elements and then just take the average

00:06:56.560 --> 00:06:56.810
right?

00:06:56.810 --> 00:06:58.670
So we do this for all these.

00:06:58.670 --> 00:07:02.248
In the end what we have is this one.

00:07:02.248 --> 00:07:04.800
This is the average vector of these

00:07:04.800 --> 00:07:05.230
two.

00:07:06.290 --> 00:07:08.710
So it's a centroid of this two.

00:07:09.360 --> 00:07:11.810
That's also look at the centroid of the

00:07:11.810 --> 00:07:12.890
negative documents.

00:07:12.890 --> 00:07:15.020
This is basically the same. we are gonna

00:07:15.020 --> 00:07:17.120
take the average of three elements.

00:07:18.030 --> 00:07:19.850
And these are the corresponding

00:07:19.850 --> 00:07:22.470
elements in the three vectors, and so

00:07:22.470 --> 00:07:23.170
on so forth.

00:07:23.170 --> 00:07:25.290
So in the end we have this one.

00:07:26.120 --> 00:07:27.920
Now in the Rocchio Feedback Method,

00:07:27.920 --> 00:07:29.870
we're going to combine all these with

00:07:29.870 --> 00:07:31.570
the original query vector, which is

00:07:31.570 --> 00:07:32.840
this.

00:07:32.840 --> 00:07:34.730
So now, let's see how we combine them

00:07:34.730 --> 00:07:36.360
together.

00:07:36.360 --> 00:07:37.650
That's basically this.

00:07:38.620 --> 00:07:40.660
I saw we have a parameter alpha

00:07:40.660 --> 00:07:43.330
controlling the original period 

00:07:43.330 --> 00:07:45.759
weight, that's one, and then we have

00:07:45.760 --> 00:07:49.660
beta to control the influence of the

00:07:49.660 --> 00:07:52.215
positive centroid weight that's

00:07:52.215 --> 00:07:54.470
1.5 that comes from here.

00:07:55.030 --> 00:07:56.750
Alright, so this.

00:07:57.770 --> 00:07:58.630
Goes here.

00:08:00.270 --> 00:08:02.850
And we also have this negative

00:08:04.260 --> 00:08:08.130
weight here, controlled by Gamma here and

00:08:08.130 --> 00:08:09.220
this weight that has come.

00:08:09.220 --> 00:08:12.760
From of course the negative centroid here.

00:08:14.410 --> 00:08:16.410
And we do exactly the same for other

00:08:16.410 --> 00:08:17.250
terms.

00:08:17.250 --> 00:08:18.870
Each is for one term.

00:08:22.240 --> 00:08:23.990
And this is our new of vector.

00:08:25.580 --> 00:08:27.510
And we're going to use this new query

00:08:27.510 --> 00:08:28.390
vector.

00:08:29.050 --> 00:08:31.440
This one to rent the documents.

00:08:31.440 --> 00:08:33.625
You can imagine what would happen right

00:08:33.625 --> 00:08:35.487
because of the movement that this one

00:08:35.487 --> 00:08:37.940
would match these red documents much

00:08:37.940 --> 00:08:40.920
better because we move this vector

00:08:40.920 --> 00:08:43.450
closer to them and it's going to

00:08:43.450 --> 00:08:45.370
penalize these black documents in these

00:08:45.370 --> 00:08:47.220
non relevant documents.

00:08:47.220 --> 00:08:49.270
So this is precisely what we want from

00:08:49.270 --> 00:08:49.960
feedback.

00:08:50.690 --> 00:08:53.350
Now, of course, if we apply this method

00:08:53.350 --> 00:08:54.270
in practice.

00:08:55.280 --> 00:08:57.510
We will see one potential problem.

00:08:58.100 --> 00:09:00.610
And that is the original query has only

00:09:00.610 --> 00:09:02.400
four terms that are.

00:09:03.720 --> 00:09:04.520
non-zero

00:09:06.290 --> 00:09:08.270
But after we do query expansion, you

00:09:08.270 --> 00:09:11.470
can imagine it would have many terms

00:09:11.470 --> 00:09:13.230
that would have nonzero weights.

00:09:13.230 --> 00:09:15.300
So the calculation would have to

00:09:15.300 --> 00:09:16.720
involve more terms.

00:09:17.950 --> 00:09:21.280
In practice, we often truncate this

00:09:21.280 --> 00:09:24.590
vector, and only retain the terms with

00:09:24.590 --> 00:09:25.530
highest weights.

00:09:26.840 --> 00:09:28.550
So let's talk about how we use this

00:09:28.550 --> 00:09:29.690
method in practice.

00:09:30.460 --> 00:09:32.700
I just mentioned that we often

00:09:32.700 --> 00:09:34.980
truncated adapter and see the only a

00:09:34.980 --> 00:09:36.840
small number of words that have highest

00:09:36.840 --> 00:09:38.880
weights in the centroid vector. This is

00:09:38.880 --> 00:09:40.080
for efficiency concern.

00:09:41.100 --> 00:09:43.630
I also say that here that negative

00:09:43.630 --> 00:09:45.860
examples or non relevant examples tend

00:09:45.860 --> 00:09:48.050
not to be very useful, especially

00:09:48.050 --> 00:09:49.800
compared with positive examples.

00:09:50.710 --> 00:09:52.850
Now you can think about why.

00:09:53.500 --> 00:09:55.280
One reason is because negative

00:09:55.280 --> 00:09:58.150
documents tend to distract the query in

00:09:58.150 --> 00:09:59.160
all directions.

00:09:59.160 --> 00:10:01.990
So when you take the average it doesn't

00:10:01.990 --> 00:10:03.740
really tell you where exactly should be

00:10:03.740 --> 00:10:04.560
moving too.

00:10:06.740 --> 00:10:09.120
Where is positive documents tend to be

00:10:09.120 --> 00:10:10.830
clustered together and they will point

00:10:10.830 --> 00:10:13.710
you to a consistent direction.

00:10:14.620 --> 00:10:16.400
So that also means sometimes we don't

00:10:16.400 --> 00:10:18.430
have to use those negative examples.

00:10:19.000 --> 00:10:20.660
But note that in some cases in

00:10:20.660 --> 00:10:23.100
difficult queries where most top ranking

00:10:23.100 --> 00:10:25.300
results are negative, negative feedback

00:10:25.300 --> 00:10:26.650
factor is very useful.

00:10:27.430 --> 00:10:29.390
Another thing is to avoid overfitting.

00:10:29.390 --> 00:10:31.270
That means we have to keep relatively

00:10:31.270 --> 00:10:34.150
high weight on original query terms.

00:10:35.010 --> 00:10:36.640
Why? Because

00:10:36.640 --> 00:10:40.740
The sample that we see in feedback is a

00:10:40.740 --> 00:10:41.932
relatively small sample.

00:10:41.932 --> 00:10:44.285
We don't want to overly trust the

00:10:44.285 --> 00:10:44.790
small sample.

00:10:45.470 --> 00:10:48.080
An the original query terms are still

00:10:48.080 --> 00:10:48.965
very important.

00:10:48.965 --> 00:10:51.970
Those terms of typing by the user and

00:10:51.970 --> 00:10:53.963
the user has decided that those terms

00:10:53.963 --> 00:10:55.180
are most important.

00:10:55.730 --> 00:10:59.650
So in order to prevent us from

00:10:59.650 --> 00:11:03.050
overfitting or drifting the topic with

00:11:03.050 --> 00:11:06.400
preventing topic drifting due to bias

00:11:06.400 --> 00:11:09.040
toward the feedback examples, we

00:11:09.040 --> 00:11:10.580
generally would have to keep a pretty

00:11:10.580 --> 00:11:12.550
high weight on the original terms.

00:11:12.550 --> 00:11:14.110
It's always safe to do that.

00:11:14.930 --> 00:11:18.195
And this is especially true for pseudo

00:11:18.195 --> 00:11:19.410
relevance feedback.

00:11:19.410 --> 00:11:21.200
Now this method can be used for both

00:11:21.200 --> 00:11:22.856
relevance feedback and pseudo relevance

00:11:22.856 --> 00:11:23.172
feedback.

00:11:23.172 --> 00:11:25.530
In the case of pseudo feedback up, the

00:11:25.530 --> 00:11:28.150
parameter beta should be set to a

00:11:28.150 --> 00:11:31.090
smaller value because the relevant

00:11:31.090 --> 00:11:32.840
examples are assumed to be relevant.

00:11:32.840 --> 00:11:34.930
They are not as reliable as the

00:11:34.930 --> 00:11:35.850
relevance feedback.

00:11:35.850 --> 00:11:38.740
In the case of relevance feedback, we

00:11:38.740 --> 00:11:41.020
obviously could use a larger value, so

00:11:41.020 --> 00:11:43.050
those parameters they have to be set in

00:11:43.050 --> 00:11:43.670
imparallelly.

00:11:44.900 --> 00:11:45.990
And the root Rocchio.

00:11:45.990 --> 00:11:47.540
method is usually robust.

00:11:47.540 --> 00:11:48.380
and effective.

00:11:48.380 --> 00:11:50.880
It's still very popular method of all

00:11:50.880 --> 00:11:51.580
feedback.


