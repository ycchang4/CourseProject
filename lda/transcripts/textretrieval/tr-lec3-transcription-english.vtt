WEBVTT Kind: captions; Language: en-US

NOTE
Created on 2021-02-27T00:07:10.1493291Z by ClassTranscribe

00:00:00.280 --> 00:00:01.860
This lecture is about the text

00:00:01.860 --> 00:00:02.940
retrieval problem.

00:00:12.710 --> 00:00:15.130
This picture shows our overall plan for

00:00:15.130 --> 00:00:15.730
lectures.

00:00:16.630 --> 00:00:18.720
In the last lecture we talked about the

00:00:18.720 --> 00:00:21.680
high level strategies for text access.

00:00:21.680 --> 00:00:24.390
We talked about push versus pull.

00:00:25.220 --> 00:00:27.890
Search engines are the main tools for

00:00:27.890 --> 00:00:29.980
supporting the pull mode.

00:00:30.590 --> 00:00:32.980
Starting from this lecture, we're going

00:00:32.980 --> 00:00:35.310
to talk about how the search engines

00:00:35.310 --> 00:00:36.370
work in detail.

00:00:37.960 --> 00:00:40.510
So first it's about the text retrieval

00:00:40.510 --> 00:00:40.930
problem.

00:00:42.080 --> 00:00:44.360
We are going to talk about three things

00:00:44.360 --> 00:00:45.200
in this lecture.

00:00:45.200 --> 00:00:48.620
First, we'll define text retrieval.

00:00:49.510 --> 00:00:51.870
Second, we're going to make a comparison

00:00:51.870 --> 00:00:54.830
between text retrieval and the related

00:00:54.830 --> 00:00:56.330
task, database retrieval.

00:00:58.130 --> 00:00:59.930
Finally, we're going to talk about the

00:00:59.930 --> 00:01:01.990
document selecting versus document

00:01:01.990 --> 00:01:04.780
ranking as two strategies for

00:01:04.780 --> 00:01:06.480
responding to a users query.

00:01:09.760 --> 00:01:11.260
So what is text retrieval?

00:01:12.690 --> 00:01:14.780
It should be a task that's familiar to

00:01:14.780 --> 00:01:17.470
most of us because we're using web

00:01:17.470 --> 00:01:18.860
search engines all the time.

00:01:19.800 --> 00:01:22.140
So text retrieval is basically

00:01:22.900 --> 00:01:26.140
a task where the system would respond

00:01:26.140 --> 00:01:28.370
to a user's query with relevant

00:01:28.370 --> 00:01:29.030
documents.

00:01:29.790 --> 00:01:31.830
Basically, to support the query.

00:01:32.580 --> 00:01:35.990
As one way to implement the pull mode

00:01:35.990 --> 00:01:37.330
of information access.

00:01:39.110 --> 00:01:41.230
So the scenario is the following you have a

00:01:41.230 --> 00:01:42.790
collection of text documents.

00:01:43.450 --> 00:01:45.439
These documents could be all the web

00:01:45.440 --> 00:01:46.559
pages on the web.

00:01:47.250 --> 00:01:49.350
Or all the literature articles in the

00:01:49.350 --> 00:01:50.320
digital library.

00:01:51.070 --> 00:01:55.380
Or maybe all the text files in your

00:01:55.380 --> 00:01:56.320
computer.

00:01:58.540 --> 00:02:01.732
A user will typically give a query to

00:02:01.732 --> 00:02:03.910
the system to express information need

00:02:03.910 --> 00:02:06.667
and then the system would return

00:02:06.667 --> 00:02:09.750
relevant documents to users. Relevant

00:02:09.750 --> 00:02:10.490
documents

00:02:11.280 --> 00:02:12.860
refer to those documents that are

00:02:12.860 --> 00:02:15.120
useful to the user who is in typing the

00:02:15.120 --> 00:02:15.600
query.

00:02:16.790 --> 00:02:18.330
Now this task is often called

00:02:18.330 --> 00:02:19.680
information retrieval.

00:02:21.060 --> 00:02:23.020
But literally, information retrieval

00:02:23.020 --> 00:02:25.250
would broadly include retrieval of

00:02:25.250 --> 00:02:27.590
other non textual information as well.

00:02:27.590 --> 00:02:31.290
For example audio, video etc.

00:02:32.370 --> 00:02:34.740
It's worth noting that text retrieval is

00:02:34.740 --> 00:02:37.140
at the core of information retrieval,

00:02:37.140 --> 00:02:41.150
in the sense that other medias, such as

00:02:41.150 --> 00:02:44.265
video, can be retrieved by exploiting

00:02:44.265 --> 00:02:46.330
the companion text data.

00:02:46.330 --> 00:02:47.750
So for example.

00:02:48.880 --> 00:02:50.850
Current image search engines.

00:02:51.550 --> 00:02:54.970
Actually match the users query with the

00:02:54.970 --> 00:02:57.530
companion text data of the image.

00:02:59.740 --> 00:03:03.250
This problem is also called the search

00:03:03.250 --> 00:03:04.050
problem.

00:03:05.400 --> 00:03:07.010
And the technology is often called

00:03:07.010 --> 00:03:08.800
search technology in industry.

00:03:11.040 --> 00:03:12.850
If you have to take a course in

00:03:12.850 --> 00:03:13.690
databases.

00:03:14.430 --> 00:03:16.360
It will be useful to pause the lecture

00:03:16.360 --> 00:03:17.140
at this point.

00:03:18.070 --> 00:03:19.120
And think about.

00:03:20.370 --> 00:03:23.080
The differences between text retrieval

00:03:23.080 --> 00:03:24.390
and database retrieval.

00:03:25.030 --> 00:03:27.980
Are these two tasks are similar in many

00:03:27.980 --> 00:03:28.500
ways?

00:03:29.420 --> 00:03:31.140
But there are some important

00:03:31.140 --> 00:03:31.890
differences.

00:03:33.760 --> 00:03:35.910
So spend a moment to think about the

00:03:35.910 --> 00:03:37.830
differences between the two.

00:03:37.830 --> 00:03:40.180
Think about the data and information

00:03:40.180 --> 00:03:43.740
managed by search engine versus those

00:03:43.740 --> 00:03:46.250
that are managed by a database system.

00:03:46.930 --> 00:03:49.000
Think about the difference between the

00:03:49.000 --> 00:03:51.380
queries that you typically specify for

00:03:51.380 --> 00:03:52.470
a database system.

00:03:53.240 --> 00:03:56.120
Versus the queries that are typed in by

00:03:56.120 --> 00:03:57.580
users on the search engine.

00:03:59.030 --> 00:04:00.450
And then finally, think about the

00:04:00.450 --> 00:04:01.000
answers.

00:04:02.760 --> 00:04:04.400
What's the difference between the two?

00:04:06.640 --> 00:04:08.680
OK, so if we think about the

00:04:08.680 --> 00:04:10.550
information or data managed by the two

00:04:10.550 --> 00:04:12.670
systems, we will see that.

00:04:13.640 --> 00:04:15.980
In text retrieval, the data is

00:04:15.980 --> 00:04:18.290
unstructured free text, but in

00:04:18.290 --> 00:04:19.270
databases.

00:04:19.830 --> 00:04:22.250
They are structured data where there is

00:04:22.250 --> 00:04:24.700
a clear definer schema to tell you.

00:04:24.700 --> 00:04:28.080
This column is the names of people in

00:04:28.080 --> 00:04:30.570
that column is ages, etc.

00:04:31.510 --> 00:04:34.470
In unstructured text it's not obvious

00:04:34.470 --> 00:04:37.137
what are the names of people mentioned

00:04:37.137 --> 00:04:38.420
in the text.

00:04:40.290 --> 00:04:42.890
Because of this difference, we can also

00:04:42.890 --> 00:04:45.600
see that text information tends to be

00:04:45.600 --> 00:04:47.455
more ambiguous, and we talked about

00:04:47.455 --> 00:04:49.390
that in the natural language processing

00:04:49.390 --> 00:04:50.250
lecture.

00:04:51.060 --> 00:04:53.550
Whereas in databases that data tended

00:04:53.550 --> 00:04:55.520
to have well defined the semantics.

00:04:58.080 --> 00:05:00.210
There is also important difference in

00:05:00.210 --> 00:05:00.900
the queries.

00:05:01.610 --> 00:05:03.210
And this is partly due to the

00:05:03.210 --> 00:05:04.710
difference in the information.

00:05:05.280 --> 00:05:05.920
Or data.

00:05:07.490 --> 00:05:10.080
So text queries tend to be ambiguous.

00:05:10.840 --> 00:05:12.510
Where as in database search.

00:05:12.510 --> 00:05:16.170
The queries are typically well defined.

00:05:16.170 --> 00:05:18.200
Think about the SQL query that would

00:05:18.200 --> 00:05:21.440
clearly specify what records to be

00:05:21.440 --> 00:05:23.940
returned so it has very well defined

00:05:23.940 --> 00:05:24.660
semantics.

00:05:27.010 --> 00:05:29.090
Keyword queries or natural language

00:05:29.090 --> 00:05:31.960
queries tend to be incomplete also.

00:05:32.760 --> 00:05:35.120
In that it doesn't really fully

00:05:35.120 --> 00:05:36.730
specify what document should be

00:05:36.730 --> 00:05:37.330
retrieved.

00:05:38.300 --> 00:05:40.315
Where as in the database search.

00:05:40.315 --> 00:05:43.250
The SQL query can be regarded as a

00:05:43.250 --> 00:05:45.780
computer specification for what should

00:05:45.780 --> 00:05:46.510
be returned.

00:05:47.210 --> 00:05:49.420
And because of these differences, the

00:05:49.420 --> 00:05:51.200
answers will be also different.

00:05:51.920 --> 00:05:55.000
In the case of texy retrieval, we're

00:05:55.000 --> 00:05:56.710
looking for relevant documents.

00:05:57.960 --> 00:06:00.640
In the database search we are

00:06:00.640 --> 00:06:03.740
retrieving records or match records

00:06:03.740 --> 00:06:04.240
with.

00:06:05.020 --> 00:06:07.390
The SQL query more precisely.

00:06:08.960 --> 00:06:12.350
Now, in the case of tax retrieval, what

00:06:12.350 --> 00:06:15.710
should be the right answers to a query

00:06:15.710 --> 00:06:19.340
is not very well specified as we just

00:06:19.340 --> 00:06:19.940
discussed.

00:06:21.000 --> 00:06:23.400
So it's unclear what should be the

00:06:23.400 --> 00:06:26.440
right answers to a query, and this has

00:06:26.440 --> 00:06:29.900
very important consequences and that is

00:06:29.900 --> 00:06:34.040
text retrieval is an empirically defined

00:06:34.040 --> 00:06:34.830
problem.

00:06:36.560 --> 00:06:37.720
So this is.

00:06:41.350 --> 00:06:43.130
A problem because.

00:06:44.010 --> 00:06:45.800
If it's empirically defined.

00:06:46.360 --> 00:06:49.570
Then we cannot mathematically prove one

00:06:49.570 --> 00:06:51.600
method is better than another method.

00:06:52.450 --> 00:06:55.100
That also means we must rely on

00:06:55.100 --> 00:06:57.790
empirical evaluation involving users.

00:06:58.610 --> 00:07:01.270
To know which method works better.

00:07:02.300 --> 00:07:04.820
And that's why we have a lecture,

00:07:04.820 --> 00:07:07.080
actually more than one lectures to

00:07:07.080 --> 00:07:09.270
cover the issue of evaluation.

00:07:09.270 --> 00:07:11.730
Because this is a very important topic

00:07:11.730 --> 00:07:12.860
for search engines.

00:07:13.770 --> 00:07:16.090
Without knowing how to evaluate the algorithm

00:07:16.090 --> 00:07:19.460
appropriately, there's no way to tell

00:07:19.460 --> 00:07:21.239
whether we have got a better algorithm

00:07:21.240 --> 00:07:23.760
or whether one system is better than

00:07:23.760 --> 00:07:24.300
another.

00:07:28.490 --> 00:07:30.550
So now let's look at the problem in a

00:07:30.550 --> 00:07:31.300
formal way.

00:07:31.910 --> 00:07:34.170
So this slide shows a formal

00:07:34.170 --> 00:07:35.820
formulation of the text retrieval

00:07:35.820 --> 00:07:36.280
problem.

00:07:37.010 --> 00:07:40.370
First, we have our vocabulary set.

00:07:40.970 --> 00:07:42.990
Which is just a set of words in a

00:07:42.990 --> 00:07:43.530
language.

00:07:44.770 --> 00:07:45.630
Now here.

00:07:46.390 --> 00:07:48.390
We are considering just one language,

00:07:48.390 --> 00:07:51.190
but in reality on the web there might

00:07:51.190 --> 00:07:52.950
be multiple natural languages.

00:07:52.950 --> 00:07:55.620
We have text data in all kinds of

00:07:55.620 --> 00:07:56.240
languages.

00:07:57.420 --> 00:07:59.502
But here for simplicity, we just assume

00:07:59.502 --> 00:08:02.482
there is one kind of language as the

00:08:02.482 --> 00:08:05.230
techniques used for retrieving data

00:08:05.230 --> 00:08:08.310
from multiple languages are more or less

00:08:08.310 --> 00:08:11.160
similar to the techniques used for

00:08:11.160 --> 00:08:13.079
retrieving documents in one language.

00:08:13.080 --> 00:08:14.565
Although there is important difference,

00:08:14.565 --> 00:08:17.110
the principles and methods are.

00:08:17.660 --> 00:08:18.710
very similar.

00:08:21.850 --> 00:08:23.760
Next we have the query, which is a

00:08:23.760 --> 00:08:24.930
sequence of words.

00:08:25.860 --> 00:08:27.020
And so here.

00:08:27.660 --> 00:08:28.710
You can see.

00:08:29.570 --> 00:08:29.970
The.

00:08:30.950 --> 00:08:31.860
Query.

00:08:33.580 --> 00:08:36.250
Is defined as a sequence of words.

00:08:36.250 --> 00:08:40.590
Each q sub I is a word in the

00:08:40.590 --> 00:08:41.350
vocabulary.

00:08:42.160 --> 00:08:44.660
A document is defined in the same way,

00:08:44.660 --> 00:08:47.110
so it's also a sequence of words and

00:08:47.110 --> 00:08:48.810
here d sub ij.

00:08:48.810 --> 00:08:51.640
is also a word in the vocabulary.

00:08:52.720 --> 00:08:54.690
Now typically the documents are much

00:08:54.690 --> 00:08:55.990
longer than queries.

00:08:56.990 --> 00:08:58.770
But there are also cases where.

00:08:59.900 --> 00:09:01.620
The documents may be very short.

00:09:04.220 --> 00:09:07.150
So you can think about what might be an

00:09:07.150 --> 00:09:08.530
example of that case.

00:09:09.500 --> 00:09:12.880
I hope you can think of Twitter search

00:09:12.880 --> 00:09:14.820
right tweets are very short.

00:09:16.650 --> 00:09:19.230
But in general, documents are longer

00:09:19.230 --> 00:09:20.530
than the queries.

00:09:23.000 --> 00:09:26.310
Now then we have a collection of

00:09:26.310 --> 00:09:27.000
documents.

00:09:29.280 --> 00:09:31.139
And this collection can be very large,

00:09:31.140 --> 00:09:32.290
so think about the web.

00:09:32.290 --> 00:09:33.919
It could could be very large.

00:09:34.940 --> 00:09:37.190
And then the goal of text retrieval is

00:09:37.190 --> 00:09:39.390
to find the set of relevant

00:09:39.390 --> 00:09:42.810
documents which we denoted by R of Q

00:09:42.810 --> 00:09:45.370
because it depends on the query and

00:09:45.370 --> 00:09:48.277
this is in general a subset of all the

00:09:48.277 --> 00:09:49.370
documents in the collection.

00:09:52.250 --> 00:09:55.130
Unfortunately, this set of relevant

00:09:55.130 --> 00:09:57.980
documents is generally unknown.

00:09:58.650 --> 00:10:00.920
And user dependent in the sense that

00:10:00.920 --> 00:10:03.840
for the same query typed in by different

00:10:03.840 --> 00:10:04.500
users.

00:10:05.270 --> 00:10:07.600
The expected relevant documents may be

00:10:07.600 --> 00:10:08.150
different.

00:10:09.220 --> 00:10:12.170
The query given to us by the user is

00:10:12.170 --> 00:10:15.090
only a hint on which document should be

00:10:15.090 --> 00:10:15.850
in this set.

00:10:17.670 --> 00:10:21.810
And indeed, the user is generally

00:10:21.810 --> 00:10:24.880
unable to specify what exactly should

00:10:24.880 --> 00:10:26.760
be in this set, especially in the case

00:10:26.760 --> 00:10:27.390
of web search.

00:10:27.390 --> 00:10:30.049
Where collection is so large the user

00:10:30.050 --> 00:10:31.790
doesn't have complete knowledge about

00:10:31.790 --> 00:10:32.580
the whole collection.

00:10:33.860 --> 00:10:38.110
So the best a search system can do.

00:10:38.780 --> 00:10:43.770
Is to compute an approximation of this

00:10:43.770 --> 00:10:44.870
relevant document.

00:10:44.870 --> 00:10:48.800
set so we denote by r prime of Q.

00:10:49.700 --> 00:10:52.280
So formally, we can see the task is to

00:10:52.280 --> 00:10:55.580
compute this r prime of Q, an

00:10:55.580 --> 00:10:57.360
approximation of the relevant

00:10:57.360 --> 00:10:58.050
documents.

00:10:59.530 --> 00:11:00.880
So how can we do that?

00:11:02.010 --> 00:11:05.890
Imagine if you are now asked to write a

00:11:05.890 --> 00:11:07.320
program to do this.

00:11:08.860 --> 00:11:10.500
What would you do now?

00:11:10.500 --> 00:11:11.510
Think for a moment.

00:11:12.640 --> 00:11:14.320
Right, so these are your input.

00:11:15.610 --> 00:11:18.090
the query the documents.

00:11:20.470 --> 00:11:23.800
And then you are to compute the answers

00:11:23.800 --> 00:11:24.700
to this query.

00:11:25.250 --> 00:11:26.940
Which is a set of documents that would

00:11:26.940 --> 00:11:28.170
be useful to the user.

00:11:29.610 --> 00:11:31.100
So how would you solve the problem?

00:11:33.290 --> 00:11:35.210
Now, in general.

00:11:35.760 --> 00:11:37.280
There are two strategies that we can

00:11:37.280 --> 00:11:37.670
use.

00:11:39.160 --> 00:11:41.520
The first strategies will do document

00:11:41.520 --> 00:11:43.230
selection and that is we're going to

00:11:43.230 --> 00:11:46.270
have a binary classification function

00:11:46.270 --> 00:11:47.950
or binary classifier.

00:11:49.220 --> 00:11:51.380
That's a function that would take a

00:11:51.380 --> 00:11:53.200
document and query as input.

00:11:53.760 --> 00:11:56.760
And then give a zero or one as output

00:11:56.760 --> 00:11:59.570
to indicate whether this document is

00:11:59.570 --> 00:12:01.420
relevant to the query or not.

00:12:01.420 --> 00:12:04.810
So in this case you can see the

00:12:04.810 --> 00:12:05.540
document.

00:12:08.520 --> 00:12:11.910
The relevant document in the set is

00:12:11.910 --> 00:12:16.050
defined as follows, it basically.

00:12:16.810 --> 00:12:18.870
All the documents that.

00:12:19.540 --> 00:12:22.490
Have a value of 1 by this function.

00:12:24.700 --> 00:12:26.510
And so in this case you can see the

00:12:26.510 --> 00:12:28.770
system must decide if a document is

00:12:28.770 --> 00:12:29.820
relevant or not.

00:12:29.820 --> 00:12:31.900
Basically it has to say whether it's

00:12:31.900 --> 00:12:32.900
one or zero.

00:12:33.520 --> 00:12:35.560
And this is called absolute relevance.

00:12:36.220 --> 00:12:38.100
Basically it needs to know exactly

00:12:38.100 --> 00:12:39.530
whether it's going to be useful to the

00:12:39.530 --> 00:12:39.970
user.

00:12:41.770 --> 00:12:43.790
Alternatively, there's another strategy

00:12:43.790 --> 00:12:45.040
called document ranking.

00:12:45.690 --> 00:12:47.740
Now, in this case the system is not

00:12:47.740 --> 00:12:50.260
going to make a call whether a document

00:12:50.260 --> 00:12:52.533
is relevant or not, but rather the

00:12:52.533 --> 00:12:55.430
system is going to use the real value

00:12:55.430 --> 00:12:57.090
function F here.

00:12:58.300 --> 00:13:01.395
That would simply give us a value that

00:13:01.395 --> 00:13:03.520
would indicate which document is more

00:13:03.520 --> 00:13:04.370
likely relevant.

00:13:05.580 --> 00:13:07.110
So it's not going to make a call

00:13:07.110 --> 00:13:08.550
whether this document is relevant or

00:13:08.550 --> 00:13:10.410
not, but rather it would say which

00:13:10.410 --> 00:13:11.960
document is more likely relevant.

00:13:12.640 --> 00:13:16.060
So this function then can be used to

00:13:16.060 --> 00:13:17.630
rank the documents.

00:13:18.420 --> 00:13:20.100
And then we're going to let the user

00:13:20.100 --> 00:13:22.309
decide where to stop when the user

00:13:22.310 --> 00:13:24.440
looks at the documents.

00:13:25.290 --> 00:13:27.780
So we have a threshold.

00:13:27.780 --> 00:13:28.990
See down here.

00:13:29.990 --> 00:13:33.390
To determine what documents should be

00:13:33.390 --> 00:13:35.940
in this approximation, set.

00:13:37.240 --> 00:13:38.920
And we can assume that all the

00:13:38.920 --> 00:13:41.240
documents that are ranked above this

00:13:41.240 --> 00:13:43.720
threshold are in this set.

00:13:44.870 --> 00:13:47.070
Be cause in effect, these are the

00:13:47.070 --> 00:13:48.930
documents that we deliver to the user.

00:13:49.650 --> 00:13:54.160
And theta is a cut off determined by the

00:13:54.160 --> 00:13:54.640
user.

00:13:56.820 --> 00:13:59.010
So here we've got some collaboration

00:13:59.010 --> 00:14:01.530
from the user in some sense, because we

00:14:01.530 --> 00:14:03.755
don't really make a cut off and the

00:14:03.755 --> 00:14:06.545
user kind of helped the system make a

00:14:06.545 --> 00:14:07.190
cut off.

00:14:07.970 --> 00:14:09.746
So in this case the system only needs

00:14:09.746 --> 00:14:12.010
to decide if one document is more

00:14:12.010 --> 00:14:14.680
likely relevant than another, and that

00:14:14.680 --> 00:14:17.380
is it only needs to determine relative

00:14:17.380 --> 00:14:18.010
relevance.

00:14:18.900 --> 00:14:21.000
As opposed to absolute relevance.

00:14:22.100 --> 00:14:23.970
Now you can probably already sense

00:14:23.970 --> 00:14:24.470
that.

00:14:25.110 --> 00:14:28.770
Relevant relative relevance would be

00:14:28.770 --> 00:14:30.480
easier to determine their absolute

00:14:30.480 --> 00:14:32.910
relevance because in the first case, we

00:14:32.910 --> 00:14:35.540
have to say exactly whether a document

00:14:35.540 --> 00:14:36.580
is relevant or not.

00:14:37.330 --> 00:14:41.150
And it turns out that ranking is indeed

00:14:41.150 --> 00:14:44.660
generally preferred to document

00:14:44.660 --> 00:14:45.210
selection.

00:14:46.310 --> 00:14:47.800
So let's look at this.

00:14:47.800 --> 00:14:49.650
These two strategies in more detail.

00:14:50.400 --> 00:14:53.605
So this picture shows how it works.

00:14:53.605 --> 00:14:57.530
So on the left side we see these

00:14:57.530 --> 00:14:59.950
documents and we use the pluses.

00:15:00.580 --> 00:15:02.910
To indicate the relevant documents so

00:15:02.910 --> 00:15:05.380
we can see the true relevant documents

00:15:05.380 --> 00:15:06.410
here.

00:15:07.570 --> 00:15:08.130
This is.

00:15:09.150 --> 00:15:12.020
This set of two random documents

00:15:12.020 --> 00:15:14.700
consist of these pluses these

00:15:14.700 --> 00:15:15.210
documents.

00:15:16.660 --> 00:15:20.300
And with the document selection.

00:15:22.360 --> 00:15:25.320
Functioning we are going to do basically

00:15:25.320 --> 00:15:27.800
classify them into two groups, relevant

00:15:27.800 --> 00:15:29.615
documents and non relevant ones.

00:15:29.615 --> 00:15:32.020
Of course the classifier will not be

00:15:32.020 --> 00:15:34.285
perfect so it will make mistakes.

00:15:34.285 --> 00:15:37.990
So here we can see in the approximation

00:15:37.990 --> 00:15:40.100
of the relevant documents we have got

00:15:40.100 --> 00:15:41.650
some non relevant documents.

00:15:42.440 --> 00:15:44.210
And similarly there is a relevant

00:15:44.210 --> 00:15:46.875
document that's miss classified as non

00:15:46.875 --> 00:15:47.300
relevant.

00:15:49.010 --> 00:15:50.930
In the case of document ranking, we can

00:15:50.930 --> 00:15:54.730
see the system seems like simply ranks

00:15:54.730 --> 00:15:56.820
all the documents in the descending

00:15:56.820 --> 00:15:57.980
order of the scores.

00:15:59.480 --> 00:16:01.360
And then we're going to let the users

00:16:01.360 --> 00:16:04.230
stop wherever the user wants to stop.

00:16:04.230 --> 00:16:06.200
So if a user wants to examine more

00:16:06.200 --> 00:16:08.790
documents, then the user would go down

00:16:08.790 --> 00:16:11.010
the list to examine more and stop at

00:16:11.010 --> 00:16:12.740
the lower position.

00:16:13.410 --> 00:16:15.960
But if the user only wants to read a

00:16:15.960 --> 00:16:18.540
few relevant documents, the user might

00:16:18.540 --> 00:16:20.156
stop at the top position.

00:16:20.156 --> 00:16:23.992
So in this case the user stops at d4

00:16:23.992 --> 00:16:27.850
 so in effect we have delivered

00:16:27.850 --> 00:16:29.360
these four documents.

00:16:30.130 --> 00:16:31.040
To our user.

00:16:33.800 --> 00:16:36.230
So as I said, ranking is generally

00:16:36.230 --> 00:16:37.230
preferred.

00:16:37.230 --> 00:16:41.740
An one of the reasons is because the

00:16:41.740 --> 00:16:42.530
classifier.

00:16:42.530 --> 00:16:44.780
In the case of document selection is

00:16:44.780 --> 00:16:46.920
unlikely accurate. Why?

00:16:47.680 --> 00:16:50.516
Because the only clue is usually the

00:16:50.516 --> 00:16:54.020
query, but query may not be accurate in

00:16:54.020 --> 00:16:55.830
the sense that it could be overly

00:16:55.830 --> 00:16:56.670
constrained.

00:16:57.540 --> 00:16:59.840
For example, you might expect the

00:16:59.840 --> 00:17:02.370
relevant documents to talk about all

00:17:02.370 --> 00:17:02.880
these.

00:17:03.890 --> 00:17:07.140
Topics you by using specific vocabulary

00:17:07.140 --> 00:17:08.940
and as a result.

00:17:10.180 --> 00:17:11.010
You might.

00:17:11.570 --> 00:17:14.300
Match no random documents because in

00:17:14.300 --> 00:17:17.690
the collection no others have discussed the topic

00:17:17.690 --> 00:17:19.060
using these vocabularies.

00:17:19.690 --> 00:17:22.985
So in this case you will see there is

00:17:22.985 --> 00:17:24.470
this problem of.

00:17:25.660 --> 00:17:29.460
No relevant documents to return in the

00:17:29.460 --> 00:17:31.890
case of overly constraint query.

00:17:33.070 --> 00:17:35.450
On the other hand, if the query is

00:17:35.450 --> 00:17:38.090
underconstrained, for example.

00:17:39.130 --> 00:17:41.440
If the query does not have sufficient

00:17:41.440 --> 00:17:43.270
discriminating words to find the

00:17:43.270 --> 00:17:45.200
relevant documents, you may actually

00:17:45.200 --> 00:17:47.860
end up having over delivery.

00:17:48.990 --> 00:17:51.900
And this is when you thought these

00:17:51.900 --> 00:17:54.260
words might be sufficient to help you

00:17:54.260 --> 00:17:55.750
find the relevant documents.

00:17:55.750 --> 00:17:57.730
But it turns out that they are not

00:17:57.730 --> 00:17:59.190
sufficient, and there are many

00:17:59.190 --> 00:18:02.995
distraction documents using similar

00:18:02.995 --> 00:18:03.460
words.

00:18:04.110 --> 00:18:04.740
Right so.

00:18:05.440 --> 00:18:07.580
This is the case of over delivery.

00:18:08.420 --> 00:18:11.160
Unfortunately, it's very hard to find

00:18:11.160 --> 00:18:13.270
the right position between these two

00:18:13.270 --> 00:18:14.030
extremes.

00:18:14.910 --> 00:18:17.900
Why cause when the user is looking for

00:18:17.900 --> 00:18:18.520
the information?

00:18:18.520 --> 00:18:20.340
In general, the user does not have a

00:18:20.340 --> 00:18:22.950
good knowledge about the information to

00:18:22.950 --> 00:18:23.620
be found.

00:18:24.380 --> 00:18:27.180
And in that case the user does not have

00:18:27.180 --> 00:18:29.020
a good knowledge about what.

00:18:30.070 --> 00:18:32.120
Vocabularies will be used in those

00:18:32.120 --> 00:18:33.080
random documents.

00:18:33.630 --> 00:18:35.830
So it's very hard for user to pre

00:18:35.830 --> 00:18:42.080
specify the right level of constraints.

00:18:43.360 --> 00:18:45.980
Even if the classifier is accurate.

00:18:47.840 --> 00:18:50.930
We also still want to rank these red

00:18:50.930 --> 00:18:52.200
documents because.

00:18:52.200 --> 00:18:54.500
They are generally not equally

00:18:54.500 --> 00:18:55.120
relevant.

00:18:55.980 --> 00:18:58.460
Relevance is often a matter of degree.

00:18:59.410 --> 00:19:01.980
So we must prioritize.

00:19:02.800 --> 00:19:05.380
These documents for a user to examine.

00:19:06.180 --> 00:19:09.320
And this note that this prioritization

00:19:09.320 --> 00:19:10.760
is very important.

00:19:12.200 --> 00:19:14.480
Because a user cannot digest all the

00:19:14.480 --> 00:19:18.110
contents at once, the user general

00:19:18.110 --> 00:19:19.980
would have to look at each document

00:19:19.980 --> 00:19:20.840
sequentially.

00:19:21.610 --> 00:19:24.210
And therefore it would make sense to

00:19:24.210 --> 00:19:27.390
feed the users with the most relevant

00:19:27.390 --> 00:19:28.460
documents.

00:19:29.070 --> 00:19:31.660
And that's what ranking is doing.

00:19:31.660 --> 00:19:34.150
So For these reasons, ranking is

00:19:34.150 --> 00:19:36.420
generally preferred now.

00:19:36.420 --> 00:19:38.720
This preference also has a theoretical

00:19:38.720 --> 00:19:40.560
justification, and this is given by the

00:19:40.560 --> 00:19:42.390
probability ranking principle.

00:19:43.370 --> 00:19:46.220
In the end of this lecture there is

00:19:46.220 --> 00:19:47.330
reference for this.

00:19:48.710 --> 00:19:51.610
This principle says returning a ranked

00:19:51.610 --> 00:19:53.695
list of documents in descending order

00:19:53.695 --> 00:19:55.900
of probability that a document is

00:19:55.900 --> 00:19:57.850
relevant to the query is the optimal

00:19:57.850 --> 00:20:00.160
strategy under the following two

00:20:00.160 --> 00:20:00.820
assumptions.

00:20:01.920 --> 00:20:04.580
First, the utility of the document to a

00:20:04.580 --> 00:20:08.150
user is independent of the utility of

00:20:08.150 --> 00:20:09.140
any other document.

00:20:10.830 --> 00:20:13.880
2nd, a user would be assumed to browse

00:20:13.880 --> 00:20:15.490
the results sequentially.

00:20:17.060 --> 00:20:19.730
Now it's easy to understand why these

00:20:19.730 --> 00:20:21.440
two assumptions are needed in order to

00:20:21.440 --> 00:20:25.550
justify for the ranking strategy.

00:20:26.990 --> 00:20:30.010
because if the documents are

00:20:30.010 --> 00:20:32.130
independent then we can evaluate the

00:20:32.130 --> 00:20:34.360
utility of each document separately.

00:20:36.210 --> 00:20:37.830
And this would allow us to compute the

00:20:37.830 --> 00:20:40.490
score for each document independently,

00:20:40.490 --> 00:20:42.290
and then we're going to rank these

00:20:42.290 --> 00:20:43.950
documents based on those scores.

00:20:45.600 --> 00:20:47.897
The second assumption is to say that

00:20:47.897 --> 00:20:50.705
the user would indeed follow the ranked

00:20:50.705 --> 00:20:52.989
list if the user is not going to follow

00:20:52.989 --> 00:20:55.010
the ranked list is not going to examine

00:20:55.010 --> 00:20:56.630
the documents sequentially, then

00:20:56.630 --> 00:20:59.030
obviously the ordering would not be

00:20:59.030 --> 00:20:59.550
optimal.

00:21:00.410 --> 00:21:03.110
So under these two assumptions.

00:21:03.880 --> 00:21:06.180
We can theoretically justify the

00:21:06.180 --> 00:21:10.290
rankings strategy is in fact the best

00:21:10.290 --> 00:21:10.980
you could do.

00:21:12.740 --> 00:21:14.610
Now I've put one question here.

00:21:14.610 --> 00:21:16.470
Do these two assumptions hold?

00:21:18.070 --> 00:21:21.170
Now I suggest you to pause the lecture

00:21:21.170 --> 00:21:23.130
for a moment to think about this.

00:21:27.760 --> 00:21:30.090
Now, can you think of some examples?

00:21:31.100 --> 00:21:33.290
That would suggest.

00:21:35.140 --> 00:21:35.830
These

00:21:36.410 --> 00:21:39.120
Assumptions aren't necessarily true.

00:21:44.550 --> 00:21:46.980
Now, if you think for a moment you may

00:21:46.980 --> 00:21:47.700
realize.

00:21:48.300 --> 00:21:51.210
None of the assumptions is actually

00:21:51.210 --> 00:21:51.580
true.

00:21:53.090 --> 00:21:54.640
For example, in the case of

00:21:54.640 --> 00:21:55.880
independence assumption.

00:21:56.520 --> 00:21:58.990
We might have identical documents that

00:21:58.990 --> 00:22:01.130
have similar content or exactly the

00:22:01.130 --> 00:22:01.830
same content.

00:22:02.460 --> 00:22:04.700
If you look at each of them alone.

00:22:05.590 --> 00:22:06.730
Each is relevant.

00:22:07.670 --> 00:22:09.910
But if the user has already seen one of

00:22:09.910 --> 00:22:10.400
them.

00:22:10.950 --> 00:22:13.340
We assume it's generally not very

00:22:13.340 --> 00:22:15.960
useful for the user to see another

00:22:15.960 --> 00:22:17.470
similar or duplicated one.

00:22:18.870 --> 00:22:22.170
So clearly the utility of document is

00:22:22.170 --> 00:22:25.250
dependent on other documents that user

00:22:25.250 --> 00:22:25.810
has seen.

00:22:26.840 --> 00:22:29.390
In some other cases you might see a

00:22:29.390 --> 00:22:31.940
scenario where one document that may

00:22:31.940 --> 00:22:34.670
not be useful to the user, but when

00:22:34.670 --> 00:22:37.100
three particular documents are put

00:22:37.100 --> 00:22:39.899
together, they provide answer to the

00:22:39.900 --> 00:22:40.740
users question.

00:22:41.700 --> 00:22:44.360
So this is a collective relevance and

00:22:44.360 --> 00:22:47.545
that also suggests that the value of

00:22:47.545 --> 00:22:50.620
the document might depend on other

00:22:50.620 --> 00:22:51.160
documents.

00:22:53.180 --> 00:22:55.690
Sequential browse in general would make

00:22:55.690 --> 00:22:58.190
sense if you have a ranked list there.

00:22:59.110 --> 00:23:01.670
But even if you have a ranked list.

00:23:02.430 --> 00:23:05.110
There was evidence showing that users

00:23:05.110 --> 00:23:07.660
don't always just go strictly

00:23:07.660 --> 00:23:09.930
sequentially through the entire list.

00:23:09.930 --> 00:23:11.550
There sometimes would look at the

00:23:11.550 --> 00:23:14.620
bottom, for example, or skip some.

00:23:14.620 --> 00:23:16.310
And if you think about the more

00:23:16.310 --> 00:23:18.120
complicated interface that we could

00:23:18.120 --> 00:23:21.400
possibly use, like 2 dimensional

00:23:21.400 --> 00:23:23.020
interface where you can put the

00:23:23.020 --> 00:23:25.380
additional information on the screen,

00:23:25.380 --> 00:23:28.020
then seek when you're browsing is a

00:23:28.020 --> 00:23:29.530
very restrictive assumption.

00:23:31.870 --> 00:23:34.380
So the point here is that.

00:23:35.590 --> 00:23:38.000
None of these assumptions is really

00:23:38.000 --> 00:23:38.470
true.

00:23:39.180 --> 00:23:40.410
But nevertheless.

00:23:40.970 --> 00:23:43.010
The probability ranking principle

00:23:43.010 --> 00:23:46.680
established some solid foundation for

00:23:46.680 --> 00:23:50.480
ranking as a primary task for search

00:23:50.480 --> 00:23:51.120
engines.

00:23:51.120 --> 00:23:53.290
This has actually been the basis for a

00:23:53.290 --> 00:23:55.760
lot of research work in information

00:23:55.760 --> 00:23:58.440
retrieval, and many algorithms have

00:23:58.440 --> 00:24:00.620
been designed based on this assumption

00:24:00.620 --> 00:24:02.940
Despite that.

00:24:03.720 --> 00:24:06.310
The assumptions aren't necessarilly true and we

00:24:06.310 --> 00:24:10.700
can address this problem by doing post

00:24:10.700 --> 00:24:13.070
processing of a ranked list, for

00:24:13.070 --> 00:24:15.570
example to remove redundancy.

00:24:19.420 --> 00:24:22.800
So to summarize this lecture, the main

00:24:22.800 --> 00:24:23.560
points.

00:24:25.350 --> 00:24:27.510
That you can take away are the

00:24:27.510 --> 00:24:27.940
following.

00:24:27.940 --> 00:24:29.990
First text retrieval is an empirical

00:24:29.990 --> 00:24:31.070
defined problem.

00:24:31.620 --> 00:24:35.040
And that means which algorithm is better must

00:24:35.040 --> 00:24:37.160
be judged by the users.

00:24:37.850 --> 00:24:40.690
Second, document ranking is generally

00:24:40.690 --> 00:24:41.410
preferred.

00:24:42.360 --> 00:24:44.570
And this will help users prioritize

00:24:44.570 --> 00:24:46.230
examination of search results.

00:24:46.810 --> 00:24:48.700
And this is also to bypass the

00:24:48.700 --> 00:24:50.720
difficulty in determining absolute

00:24:50.720 --> 00:24:51.410
relevance.

00:24:52.480 --> 00:24:54.830
Because we can get some help from

00:24:54.830 --> 00:24:57.620
users in determining where to make the

00:24:57.620 --> 00:24:58.120
cut off.

00:24:58.710 --> 00:24:59.730
It's more flexible.

00:25:02.130 --> 00:25:04.710
So this further suggests that the main

00:25:04.710 --> 00:25:06.820
technical challenge in designing search

00:25:06.820 --> 00:25:09.550
engine is redesigned effective ranking

00:25:09.550 --> 00:25:10.040
function.

00:25:10.660 --> 00:25:13.390
In other words, we need to define what

00:25:13.390 --> 00:25:16.530
is the value of this function F on.

00:25:17.390 --> 00:25:19.610
The query and document pair.

00:25:21.130 --> 00:25:22.050
The whole design.

00:25:22.050 --> 00:25:24.760
Such a function is the main topic in

00:25:24.760 --> 00:25:26.190
the following lectures.

00:25:29.120 --> 00:25:31.150
There are two suggested additional

00:25:31.150 --> 00:25:31.645
readings.

00:25:31.645 --> 00:25:34.720
The first is the classic paper on

00:25:34.720 --> 00:25:36.260
probability ranking principle.

00:25:36.830 --> 00:25:39.870
The second is a must read for anyone

00:25:39.870 --> 00:25:41.830
doing research information travel.

00:25:41.830 --> 00:25:43.930
It's a classic IR book.

00:25:45.050 --> 00:25:48.540
Which has excellent coverage of the

00:25:48.540 --> 00:25:51.040
main research results in early days.

00:25:51.700 --> 00:25:54.270
Up to the time when the book was

00:25:54.270 --> 00:25:57.820
written, Chapter 6 of this book has in

00:25:57.820 --> 00:25:59.570
depth discussion of the probability

00:25:59.570 --> 00:26:01.450
ranking principle and probabilistic

00:26:01.450 --> 00:26:03.670
retrieval models in general.


